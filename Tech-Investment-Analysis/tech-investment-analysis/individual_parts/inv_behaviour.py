# -*- coding: utf-8 -*-
"""Investor Demographics & Behavior.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13i_azEpYcSjHSfhmSS55R7l4W6FcJ_GK
"""

import os  # Importing os first
import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd
from google.colab import drive

drive.mount('/content/drive')

# Define base path
base_path = "/content/drive/My Drive"

# File paths
file_paths = {
    "deals": os.path.join(base_path, "cleaned_deals.csv"),
    "dealInvestor": os.path.join(base_path, "cleaned_dealInvestor.csv"),
    "investors": os.path.join(base_path, "cleaned_investor.csv"),
    "ecosystems": os.path.join(base_path, "cleaned_ecosystem.csv"),
    "companies": os.path.join(base_path, "cleaned_companies.csv")
}

# Load data
dfs = {name: pd.read_csv(path, engine='python') for name, path in file_paths.items()}

# Print first few rows to confirm successful loading
for name, df in dfs.items():
    print(f"\n{name} DataFrame:")
    print(df.head())

# Investment firm demographics analysis
investor_counts = dfs["investors"].groupby("country").size()
print("\nInvestment Firm Demographics:")
print(investor_counts)

# Investment firms per funding stage by country
investment_counts = dfs["investors"].explode("stages").groupby(["country", "stages"]).size().reset_index(name="count")
investment_counts = investment_counts[investment_counts["count"] >= 5]
investment_pivot = investment_counts.pivot(index="country", columns="stages", values="count").fillna(0)
print(investment_pivot)

# Average deal size per stage based on investor geography
deal_size_by_stage = dfs["deals"].groupby("roundType")["amount"].mean()
print("\nAverage Deal Size Per Stage:")
print(deal_size_by_stage)

# Leading investors per stage and their influence
lead_investors_per_stage = dfs["dealInvestor"].groupby(["roundType", "investorName"]).agg(
    lead_count=("leadInvestorFlag", "sum"),
    total_deals=("dealId", "count")
).reset_index()
top_lead_investors = lead_investors_per_stage.sort_values(
    by=["roundType", "lead_count", "total_deals"], ascending=[True, False, False]
).groupby("roundType").head(3)  # Top 3 investors per stage
print("Top Lead Investors per Stage:")
print(top_lead_investors)
funding_data = dfs["deals"].merge(dfs["dealInvestor"], on="id", how="left")
investor_funding = funding_data.groupby("investorName").agg(
    total_funding=("amount", "sum"),
    avg_funding=("amount", "mean"),
    total_deals=("id", "count")
).reset_index()
top_investors = investor_funding[investor_funding["investorName"].isin(top_lead_investors["investorName"])]
print("\nInvestor Influence on Funding Success:")
print(top_investors)

# Most active investment firms yearly
active_firms = dfs["dealInvestor"].groupby(["investorName", "year"]).size().unstack()
print("\nMost Active Investment Firms Per Year:")
print(active_firms)

import plotly.express as px
import pandas as pd

# Assuming the dataframe 'investors_df' is already created
investors_df = dfs["investors"].copy()

# Categorize countries: Keep US & Canada, group others as 'Other International'
investors_df["country_grouped"] = investors_df["country"].apply(
    lambda x: x if x == "usa" else ("canada" if x == "canada" else "other International")
)

# Count number of investment firms by country group
investor_counts = investors_df.groupby("country_grouped").size().reset_index(name="count")

# Visualize Investment Firm Demographics with Plotly
fig = px.bar(
    investor_counts,
    x="country_grouped",
    y="count",
    title="Investment Firm Demographics",
    labels={"country_grouped": "Country Group", "count": "Number of Investment Firms"},
    color="country_grouped",  # Optional: color by country group
    color_discrete_sequence=px.colors.sequential.Viridis  # Optional: use 'Viridis' color palette
)

# Show the plot
fig.show()

import plotly.express as px
import pandas as pd

# Assuming the dataframe 'dfs["investors"]' is already defined
investment_counts = dfs["investors"].explode("stages").groupby(["country", "stages"]).size().reset_index(name="count")

# Filtering out insignificant data (threshold of at least 5 firms per category)
investment_counts = investment_counts[investment_counts["count"] >= 5]

# Pivoting for better visualization
investment_pivot = investment_counts.pivot(index="country", columns="stages", values="count").fillna(0)

# Plot the heatmap using Plotly
fig = px.imshow(
    investment_pivot,
    title="Number of Significant Investments per Funding Stage by Country",
    labels={"x": "Funding Stage", "y": "Country", "color": "Number of Firms"},
    color_continuous_scale="Blues",  # Optional: change color scale
)

# Adjust layout for better presentation
fig.update_xaxes(tickangle=45, tickmode='array')
fig.update_layout(
    xaxis_title="Funding Stage",
    yaxis_title="Country",
    xaxis=dict(tickmode='array'),
    yaxis=dict(tickmode='array'),
    coloraxis_colorbar=dict(title="Number of Firms")
)

# Show the plot
fig.show()

# Assuming the dataframe 'dfs["deals"]' is already defined
deal_size_by_stage = dfs["deals"].groupby("roundType")["amount"].mean().reset_index(name="avg_deal_size")

# Plot the bar chart using Plotly with Cividis color palette
fig = px.bar(
    deal_size_by_stage,
    x="roundType",
    y="avg_deal_size",
    title="Average Deal Size Per Funding Stage",
    labels={"roundType": "Funding Stage", "avg_deal_size": "Average Deal Size"},
    color="roundType",  # Optional: color by funding stage for better visualization
    color_continuous_scale="Cividis"  # Set color scale to Cividis
)

# Show the plot
fig.show()

import plotly.express as px

# Assuming the dataframe 'dfs["dealInvestor"]' and 'dfs["deals"]' are already defined
# Identify leading investors per stage
lead_investors_per_stage = dfs["dealInvestor"].groupby(["roundType", "investorName"]).agg(
    lead_count=("leadInvestorFlag", "sum"),
    total_deals=("dealId", "count")
).reset_index()

# Sort and select top investors per stage
top_lead_investors = lead_investors_per_stage.sort_values(
    by=["roundType", "lead_count", "total_deals"], ascending=[True, False, False]
).groupby("roundType").head(3)  # Top 3 investors per stage

# Influence on funding success
funding_data = dfs["deals"].merge(dfs["dealInvestor"], on="id", how="left")
investor_funding = funding_data.groupby("investorName").agg(
    total_funding=("amount", "sum"),
    avg_funding=("amount", "mean"),
    total_deals=("id", "count")
).reset_index()

# Filter for leading investors
top_investors = investor_funding[investor_funding["investorName"].isin(top_lead_investors["investorName"])]

# Plot using Plotly
fig = px.bar(
    top_investors.sort_values("total_funding", ascending=False),
    x="investorName",
    y="total_funding",
    color="total_deals",
    title="Top Lead Investors and their Funding Influence",
    labels={"investorName": "Investor Name", "total_funding": "Total Funding Received"},
    color_continuous_scale="Inferno_r"
)

# Adjust layout for better readability
fig.update_layout(
    xaxis_title="Investor Name",
    yaxis_title="Total Funding Received",
    xaxis_tickangle=45,
    legend_title="Total Deals"
)

# Show the plot
fig.show()

import matplotlib.pyplot as plt

# Assuming the dataframe 'dfs["dealInvestor"]' is already defined

# Most active investment firms yearly
active_firms = dfs["dealInvestor"].groupby(["investorName", "year"]).size().unstack()

# Get the top 10 most active firms based on total number of investments
top_active_firms = active_firms.sum(axis=1).nlargest(10)

# Plot using Matplotlib
plt.figure(figsize=(10, 6))

# Bar plot
bars = plt.bar(top_active_firms.index, top_active_firms.values, color='plum')


# Add title and labels
plt.title("Top 10 Most Active Investment Firms")
plt.xlabel("Investment Firm")
plt.ylabel("Number of Investments")

# Rotate x-axis labels for better readability
plt.xticks(rotation=45, ha="right")

# Display the plot
plt.tight_layout()
plt.show()
